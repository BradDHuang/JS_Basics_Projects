

// Promise 
    // a built-in object type in ES2015

A promise is an object 
that may produce a single value 
some time in the future: 
  either a resolved value, 
  or a reason that it’s not resolved.
  
A promise is an object which 
can be returned synchronously 
from an async. function. 

A promise is settled if it’s not pending (it has been resolved or rejected). 
Once settled, a promise can not be resettled. 
// Calling resolve() or reject() again will have no effect. 

  The immutability 
  of a settled promise is an important feature.

The Promise object 
represents the 
eventual 
completion (or failure) of 
an asynchronous operation, 
and its resulting value.

/*
PROMISE OBJECT
• ‘Token’ or ‘Proxy’ or ‘Promise’
• It contains resulting value, as a result.
• Must be in one of these states:
  • pending: initial state, not fulfilled or rejected.
  • fulfilled: the operation completed successfully.
  • rejected: the operation failed.
• It is guaranteed that a promise object will either succeed or fail.
*/


// Promise Constructor:

var promise1 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, 'foo');
});
console.log(promise1);
// expected output: [object Promise]


// axios:

// Promise based HTTP client for the browser and node.js

// HTTP (Hypertext Transfer Protocol) 
// is a communication protocol 
// used to send data from one program to another over the internet. 
// At one end of the data transfer is a server 
// and at the other end is a client. 
// The client is often browser-based, but might also be a standalone program.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then
  // e.g.
  p.then(onFulfilled[, onRejected]);
  
  p.then((value) => {
    // fulfillment
  }, (reason) => {
    // rejection
  });

/*
The then() method 

returns a Promise. 

It takes up to 2 arguments: 

    1. callback functions for the success 
    
    2. failure cases of the Promise.
// If the arguments supplied are not functions, they must be ignored.
*/   

All spec-compatible promises define a .then() method 
which you use to pass handlers 
which can take the resolved or rejected value.

// e.g.
var p = new Promise(function(resolve, reject) {
  resolve('Success!');
});
p.then(function(value) {
  console.log(value);
});
// expected output: "Success!"

/*
The catch() method 
returns a Promise 
and deals with rejected cases only. 

It behaves the same as calling Promise.prototype.then(undefined, onRejected) 
(in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)).
*/
// e.g.
var p1 = new Promise(function(resolve, reject) {
  throw 'Uh-oh!';
});
p1.catch(function(error) {
  console.log(error);
});
// expected output: Uh-oh!

/*
then() takes success and failure callbacks,

catch() takes failure callback Only.
• both return a Promise to support chaining
• “success callback” is passed a value of any kind
• “failure callback” is passed a “reason” which can be any kind of value, 
  but is typically an Error object or a string.
*/

/*
PROMISE CHAIN：
when one promise is fulfilled, you can have it immediately
invoke another function that returns a promise … and so on.


    Without promises,

    using only callbacks,
    if an async function throws,
    the calling function cannot catch it,
    and the error is swallowed.
// e.g.
  fetch(url)
    .then(process)
    .then(save)
    .catch(handleErrors);
  // Assuming each of the functions, fetch(), process(), and save() return promises, 
  // process() will wait for fetch() to complete before starting, 
  // and save() will wait for process() to complete before starting. 
  // handleErrors() will only run if any of the previous promises reject.
*/

/*
The Promise.all(iterable) method 
returns a single Promise 
that resolves when all of the promises in the iterable argument have resolved 
or when the iterable argument contains no promises. 
It rejects with the reason of the first promise that rejects.
*/
// e.g.
var promise1 = Promise.resolve(3);
var promise2 = 42;
var promise3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, 'foo');
});

Promise.all([promise1, promise2, promise3]).then(function(values) {
  console.log(values);
});
// expected output: Array [3, 42, "foo"]


// EXCEPTION HANDLING
// If an error is thrown inside a success or failure callback 
// the promise returned by then is rejected

// e.g.
  save().then(
    handleSuccess,
    handleError
  );
  // what happens if handleSuccess() throws an error? 
  // The promise returned from .then() will be rejected, 
  // but there’s nothing there to catch the rejection.
  // meaning that an error in your app gets swallowed. 
  
  save()
    .then(handleSuccess)
    .catch(handleError);
  // .catch() will handle rejections from either save(), or handleSuccess().
  
// ending all promise chains with a .catch() is recommended.

// e.g.
function asyncDouble(n) {
    return new Promise((resolve, reject) => {
        if (typeof n === 'number') {
          resolve(n * 2);
        } else {
          reject(n + ' is not a number');
        }
        // in real usage, some asynchronous operation would happen above
    });
}

let p = asyncDouble(3).then(
    v => {
    // This causes the promise returned by the call to then above to be rejected.
    throw 'Did you see this?';
    },
    err => console.error('error:', err) // not reached
); 
p.then(
    value => console.log('resolved with', value),
    reason => console.log('rejected with', reason)
);
// Output is "rejected with Did you see this?"

// ref: https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261





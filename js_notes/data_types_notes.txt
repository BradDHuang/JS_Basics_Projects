

DATA TYPE - NULL & UNDEFINED
• Both have one possible value:
    • null
    • undefined
    // The global undefined property represents the primitive value undefined. 
    // It is one of JavaScript's primitive types.

• Both represent something that doesn’t exist.
// A variable that has not been assigned a value is of type undefined. 
// A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. 
// A function returns undefined if a value was not returned.

• Difference:
    • null is usually available to programmers.
    • undefined should be reserved for JavaScript itself, 
      to indicate that something hasn’t been given a value yet.
    // You can use undefined and the strict equality and inequality operators to determine whether a variable has a value.
    // e.g. Run console.log() from the Chrome console, 
    // it prints out the return val. (undefined)
      
      
DATA TYPE - ARRAYS
// The JavaScript Array object is a global object that is used in the construction of arrays; 
// which are high-level, list-like objects.

• An ordered collection of values/elements

• Each ele. has a numeric position in the array
• 0-based index: 1st ele. in the array is ele. with index 0
• Size is not fixed; add or remove elements at any time
• Not homogeneous: individual ele. can be of any type


BASIC ARRAY METHODS：

    var arr = [0];
    
    arr.push(-1); // return value: the new length.
    console.log(arr); // [0, -1]
    
    arr.forEach((ele) => {
        console.log(ele);
    });
    // Does not make a copy of the array before iterating.
    
    // The unshift() method adds one or more elements 
    // to the beginning of an array and returns the new length of the array.
    console.log(arr.unshift(4, 2)); 
    // 4 (the new length of the array)
    console.log(arr); // [4, 2, 0, -1]
    
    // The shift() method removes the first element from an array 
    // and returns that removed element. This method changes the length of the array.
    console.log(arr.shift()); 
    // 4 (the removed element)
    console.log(arr); // [2, 0, -1]
    
    arr.sort();
    console.log(arr); // [-1, 0, 2]
    
    arr.reverse();
    console.log(arr); // [2, 0, -1]
    
    arr.pop(); // return value: the removed element.
    console.log(arr); // [2, 0]
    
    console.log(arr.toString());
    
    // The slice() method returns 
    // a shallow copy of a portion of an array 
    // into a new array object selected from begin to end 
    // (end not included). 
    // The original array will not be modified.
    var animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
    console.log(animals.slice(2)); // ["camel", "duck", "elephant"]
    console.log(animals.slice(2, 4)); // ["camel", "duck"]
    
    /*
    const queryString = {one: "o", two: "t"};
    let helper = obj => {
     return Object.entries(obj).reduce((prev, cur) => prev + cur[0] + "=" + cur[1] + "&", "?").slice(0, -1);
    };
    console.log(helper(queryString));
    // ?one=o&two=t
    */
    
    (1) The Object.entries() method 
    returns an array of a given object's own enumerable property [key, value] pairs.
    
    in the same order as that provided by a for...in loop
    
    // e.g.
        const object3 = { 100: 'a', 2: 'b', 7: 'c' };
        console.log(Object.entries(object3)[2]);
        // expected output: Array ["100", "a"]
    
    // The entries() method 
    returns a new Array Iterator object 
    that contains the key/value pairs for each index in the array.
    // e.g.
        var a = ['a', 'b', 'c'];
        var iterator = a.entries();
        for (let e of iterator) {
          console.log(e);
        }
        // [0, "a"], [1, "b"], [2, "c"]
        
    (2) arr.reduce(callback[, initialValue])
    
    (3) .slice() with negative index:
    let str = "12345";
    console.log(str.slice(0, -1)); 
    // 1234
    
    // A negative index can be used, 
    // indicating an offset from the end of the sequence. 
    // e.g. slice(2,-1) extracts the third element (with index 2) through the second-to-last element in the sequence.
    
    arr.slice([begin[, end]])
    // slice(-2) extracts the last two elements in the sequence.
    // If end is omitted, slice extracts through the end of the sequence (arr.length).
    
    slice copies object references into the new array. 
    Both the original and new array refer to the same object. 
    If a referenced object changes, 
    the changes are visible to both the new and original arrays.
    If a new element is added to either array, the other array is not affected.
    
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
    array.splice(start[, deleteCount[, item1[, item2[, ...]]]])
    Return value, an array containing the deleted elements.
    For index, 
    if negative, will begin that many elements from the end of the array 
    (with origin -1) 
    
    // The splice() method 
    // changes the contents of an array 
    // by removing existing elements and/or adding new elements.
    var months = ['Jan', 'March', 'April', 'June'];
    months.splice(1, 0, "Feb"); 
    // inserts at 1st index position
    console.log(months); // ["Jan", "Feb", "March", "April", "June"]
    months.splice(4, 1, "May"); 
    // replaces 1 element at 4th index
    console.log(months); // ["Jan", "Feb", "March", "April", "May"]
    
    var array1 = ['a', 'b', 'c'];
    var array2 = ['d', 'e', 'f'];
    console.log(array1.concat(array2));
    // ["a", "b", "c", "d", "e", "f"]
// The concat() method is used to merge two or more arrays. 
// This method does not change the existing arrays, 
// but instead returns 
// a new array.
    
    // The join() method joins all elements of an array (or an array-like object) 
    // into a string and returns this string.
    var elements = ['Fire', 'Wind', 'Rain'];
    console.log(elements.join());    
    // Fire,Wind,Rain
    console.log(elements.join(""));  // FireWindRain
    console.log(elements.join("-")); // Fire-Wind-Rain
    
The copyWithin() method shallow copies part of an array to another location in the same array and returns it, 
without modifying its size.

The fill() method fills all the elements of an array from a start index to an end index with a static value. 
The end index is not included.

The sort() method sorts the elements of an array in place and returns the array. 
The sort is not necessarily stable. 
// The default sort order 
// is according to string Unicode code points.
The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.
    e.g.
    var arr = [2,3,4,10,12];
    
    arr.sort();
    // [10, 12, 2, 3, 4]

The indexOf() method returns the first index at which a given element can be found in the array, 
or -1 if it is not present.

The lastIndexOf() method returns the last index at which a given element can be found in the array, 
or -1 if it is not present. 
The array is searched backwards, starting at fromIndex. // The index at which to start searching backwards.

The findIndex() method returns the index 
of the first element in the array that satisfies the provided testing function. 
Otherwise -1 is returned.

The find() method returns the value 
of the first element in the array that satisfies the provided testing function. 
Otherwise undefined is returned.


The forEach() method executes a provided function once for each array element.
e.g.
    var array1 = ['a', 'b', 'c'];
    
    array1.forEach(function(element) {
      console.log(element);
    });
    
    
The map() method creates 
a new array 
with the results of calling a provided function 
on every element in the calling array.
e.g.
    var array1 = [1, 4, 9, 16];
    
    const map1 = array1.map(x => x * 2);
    
    console.log(map1);
    // expected output: Array [2, 8, 18, 32]
    
Return value:
A new array 
with each element being the result of the callback function.


The filter() method creates 
a new array 
with all elements that pass the test implemented by the provided function.
e.g. 
    var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

    const result = words.filter(word => word.length > 6);
    
    console.log(result);
    // expected output: Array ["exuberant", "destruction", "present"]
    
    
The reduce() method applies a function against an accumulator 
and each element in the array (from left to right) to reduce it to a single value
e.g.
    const array1 = [1, 2, 3, 4];
    const reducer = (accumulator, currentValue) => accumulator + currentValue;
    
    // 1 + 2 + 3 + 4
    console.log(array1.reduce(reducer));
    // expected output: 10
    
    // 5 + 1 + 2 + 3 + 4
    console.log(array1.reduce(reducer, 5));
    // expected output: 15
    
    // If no initial value is supplied, the first element in the array will be used. 
    // Calling reduce() on an empty array without an initial value is an error.
    
map() vs. reduce()
// reduce transforms the entire array
// while map transfers elements individually


    
    






      
      
      
      
      
      


OOP:
a programming Model based around objects.

Constructor Func.s
    e.g. function House(...) {...}
         var firstHouse = new House(...) // new!
         a property called "__proto__" gets created. // prototype
     
    e.g. 
    function Dog(name, age) {
    	this.name = name;
    	this.age = age;
    	
        this.bark = function() {
            console.log(this.name + " just barked！");
        }
    }
    
    var rusty = new Dog("Rusty", 3);
    var fido = new Dog("Fido", 1);
    
    rusty.bark() // Rusty just barked！
    fido.bark() // Fido just barked！

Multi-Constructors
    e.g.
    function Car(...) {
        ...
        // preset value
        this.numOfWheels = 4;
    }
    function Motorcycle(...) {
        // using call()/apply()
        
        Car.call(this, ...)
        
        Car.apply(this, [...])
        Car.apply(this, arguments)
        e.g. 
        function listArgs() {
            return arguments;
        }
        listArgs(1, 2, 3) // [1, 2, 3]
        
        this.numOfWheels = 2;
    }
    
__proto__ : Object
Anytime an object is created using the "new", 
the property called "__proto__" gets created,
linking the object and the prototype property of the constructor func.
    e.g.
    function Person(name) {
        this.name = name;
    }
    var elie = new Person("Elie");
    
    elie.__proto__ === Person.prototype // true
    
    Person.prototype.constructor // ƒ Person(name) { this.name = name; }
    Person.prototype.constructor === Person // true
    
prototype:
    the prototype is Shared among ALL objects created by that constructor func.
    e.g.
    var colt = new Person("Colt");
    // Set
    Person.prototype.isInstructor = true;
    // For all
    elie.isInstructor; // true
    colt.isInstructor; // true
    
    console.dir() 
    the way to see all the properties of specified javascipt object in console 
    
    var arr = [];
    arr.__proto__ === Array.prototype; // true
    
prototype Chain:
    e.g. 
    Array -(.prototype)-> Array.prototype -(.__proto__)-> Object.prototype -(.__proto__)-> null
    
Refactoring:
    e.g. 
    function Person(name) {
        this.name = name;
        this.sayHi = function() {
            return "Hi " + this.name;
        }
    }
    elie = new Person("Elie");
    elie.sayHi();
    
    function Person(name) {
        this.name = name;
        
    }
    
    // Once Only 
    Person.prototype.sayHi = function() {
        return "Hi " + this.name;
    }
    elie = new Person("Elie");
    elie.sayHi();
    
Closures:
A func. that make use of Var.s defined in Outer func.s that have previously returned.
    e.g.
    function outer() {
    
        var data = "Closures are "; 
        // look "data" as a "private" var;
        // no one can Modify it.
        
        return function inner() {
            var iData = "awesome!";
            
            return data + iData;
        }
    }
    outer() // returns the inner() func.
    outer()() // "Closures are awesome!"
    
    
    
    
    
    
    

    
    




// Here are links for reviewing some important concepts of JS & React & ...
// Definition & Usage.

JavaScript data types and data structures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
7 data types:
6 data types that are primitives:
    Boolean
    Null
    Undefined
    Number
    String
    Symbol (new in ECMAScript 6)
    
and Object:
// In computer science, an object is a value in memory which is possibly referenced by an identifier.
    Properties
// In JavaScript, objects can be seen as a collection of properties. 
    "Normal" objects, and functions
// A JavaScript object is a mapping between keys and values. 
// Functions are regular objects with the additional capability of being callable.
    Dates
// When representing dates, the best choice is to use the built-in Date utility in JavaScript.
    Indexed collections: Arrays (and typed Arrays)
// Arrays are regular objects for which there is a particular relationship between integer-key-ed properties and the 'length' property. 
// Additionally, arrays inherit from Array.prototype which provides to them a handful of convenient methods to manipulate arrays. 
    Keyed collections: Maps, Sets(, WeakMaps, WeakSets)
    Structured data: JSON
    More objects in the standard library // JavaScript has a standard library of built-in objects. 

var vs. let:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var

The let statement declares a block scope local variable, optionally initializing it to a value.
unlike the var keyword, 
which defines a variable globally, or locally to an entire function regardless of block scope.

var declarations, 
wherever they occur, 
are processed before any code is executed. 
// This is called hoisting,
// as it appears that the variable declaration is moved to the top of the function or global code.
// Undeclared variables are always global.

Hoisting:
https://developer.mozilla.org/en-US/docs/Glossary/Hoisting

Strict mode:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode

// ES5's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode". 

// Strict mode applies to entire scripts or to individual functions. 
// It doesn't apply to block statements enclosed in {} braces; attempting to apply it to such contexts does nothing.
// To invoke strict mode for an entire script, 
// put the exact statement "use strict"; (or 'use strict';) before any other statements.


Spread syntax:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

// Spread syntax allows an iterable such as an array expression or string 
// to be expanded in places where zero or more arguments (for function calls) 
// or elements (for array literals) are expected, 
// or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.


Functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions

// In JavaScript, functions are first-class objects, 
// because they can have properties and methods just like any other object. 
// What distinguishes them from other objects is that functions can be called. 
// In brief, they are Function objects.

Arrow functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions

// An arrow function expression has a shorter syntax than a function expression 
// and does not have its own this, arguments, super, or new.target. 
// These function expressions are best suited for non-method functions, 
// and they cannot be used as constructors.

Syntax:
(param1, param2, …, paramN) => { statements } 
(param1, param2, …, paramN) => expression
// equivalent to: => { return expression; } 

// Parenthesize the body of function to return an object literal expression:
params => ({foo: bar})

Callback function:
https://developer.mozilla.org/en-US/docs/Glossary/Callback_function

// A callback function is a function passed into another function as an argument, 
// which is then invoked inside the outer function to complete some kind of routine or action.

// callbacks are often used to continue code execution after an asynchronous operation has completed
// — these are called asynchronous callbacks. 


Closures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

Classes:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends

// Classes are in fact "special functions", and just as you can define function expressions and function declarations, 
// the class syntax has 2 components: 
// (1) class expressions; (2) class declarations.

// One way to define a class is using a class declaration. 
// To declare a class, you use the class keyword with the name of the class.

// Hoisting:
    An important difference between function declarations and class declarations / expressions
    is that function declarations are hoisted 
    and class declarations are not.
    
A class expression is another way to define a class. 
Class expressions can be named or unnamed. 
The name given to a named class expression is local to the class's body. 
// (it can be retrieved through the class's (not an instance's) .name property)

// The constructor method 
// is a special method for creating and initializing an object created with a class. 

// Note: In derived classes, super() must be called before you can use 'this'. 

The extends keyword 
is used in class declarations or class expressions 
to create a class as a child of another class.

// The extends keyword can be used to subclass custom classes as well as built-in objects.
// e.g. extends the built-in Date object. 


Function.prototype:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype
// The Function.prototype property represents the Function prototype object.

// ***Function objects inherit from Function.prototype.***  

// Function.prototype cannot be modified.
// e.g. Function.prototype.apply() // function.apply(thisArg, [argsArray])


Destructuring assignment:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

RegExp:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

Promise:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise











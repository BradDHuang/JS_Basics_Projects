
// Here are links for reviewing some important concepts of JS & React & ...
// Definition & Usage.

JavaScript data types and data structures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
7 data types:
6 data types that are primitives:
    Boolean
    Null
    Undefined
    Number
    String
    Symbol (new in ECMAScript 6)
    
and Object:
// In computer science, an object is a value in memory which is possibly referenced by an identifier.
    Properties
// In JavaScript, objects can be seen as a collection of properties. 
    "Normal" objects, and functions
// A JavaScript object is a mapping between keys and values. 
// Functions are regular objects with the additional capability of being callable.
    Dates
// When representing dates, the best choice is to use the built-in Date utility in JavaScript.
    Indexed collections: Arrays (and typed Arrays)
// Arrays are regular objects for which there is a particular relationship between integer-key-ed properties and the 'length' property. 
// Additionally, arrays inherit from Array.prototype which provides to them a handful of convenient methods to manipulate arrays. 
    Keyed collections: Maps, Sets(, WeakMaps, WeakSets)
    Structured data: JSON
    More objects in the standard library // JavaScript has a standard library of built-in objects. 

var vs. let:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var

The let statement declares a block scope local variable, optionally initializing it to a value.
unlike the var keyword, 
which defines a variable globally, or locally to an entire function regardless of block scope.

var declarations, 
wherever they occur, 
are processed before any code is executed. 
// This is called hoisting,
// as it appears that the variable declaration is moved to the top of the function or global code.
// Undeclared variables are always global.

Hoisting:
https://developer.mozilla.org/en-US/docs/Glossary/Hoisting

Strict mode:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode

// ES5's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode". 

// Strict mode applies to entire scripts or to individual functions. 
// It doesn't apply to block statements enclosed in {} braces; attempting to apply it to such contexts does nothing.
// To invoke strict mode for an entire script, 
// put the exact statement "use strict"; (or 'use strict';) before any other statements.


Spread syntax:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

// Spread syntax allows an iterable such as an array expression or string 
// to be expanded in places where zero or more arguments (for function calls) 
// or elements (for array literals) are expected, 
// or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.


Functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions

// In JavaScript, functions are first-class objects, 
// because they can have properties and methods just like any other object. 
// What distinguishes them from other objects is that functions can be called. 
// In brief, they are Function objects.

Arrow functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions

// An arrow function expression has a shorter syntax than a function expression 
// and does Not have its Own this, arguments, super, or new.target. 
// These function expressions are best suited for non-method functions, 
// and they cannot be used as constructors.

Syntax:
(param1, param2, …, paramN) => { statements } 
(param1, param2, …, paramN) => expression
// equivalent to: => { return expression; } 

// Parenthesize the body of function to return an object literal expression:
params => ({foo: bar})
// This is because the code inside braces {} is parsed as a sequence of statements.

2 factors influenced 
    the introduction of arrow functions: 
        (1) shorter functions; 
        (2) no existence of this keyword.
No separate this
Until arrow functions, every new function defined its own this value.

// e.g.
function Person() {
  // The Person() constructor defines `this` as an instance of itself.
  this.age = 0;
  setInterval(function growUp() {
    // In non-strict mode, the growUp() function defines `this` 
    // as the global object (because it's where growUp() is executed.), 
    // which is different from the `this`
    // defined by the Person() constructor. 
    this.age++;
  }, 1000);
}

In ECMAScript 3/5, the this issue was fixable by assigning the value in this to a variable that could be closed over.
// e.g.
    var that = this;

Or, use bind()
// e.g.
    var module = {
      x: 42,
      getX: function() {
        return this.x;
      }
    }
    var unboundGetX = module.getX;
    console.log(unboundGetX()); // The function gets invoked at the global scope
    // expected output: undefined
    var boundGetX = unboundGetX.bind(module);
    console.log(boundGetX());
    // expected output: 42

An arrow function does not have its own this; 
the this value of the enclosing lexical context is used 
i.e. Arrow functions follow the normal variable lookup rules. 
So while searching for this which is not present in current scope 
they end up finding this from its enclosing scope .

// e.g.
function Person(){
  this.age = 0;

  setInterval(() => {
    this.age++; // |this| properly refers to the Person object
  }, 1000);
}

Since arrow functions do not have their own this, 
the methods call() or apply() can only pass in parameters. 
thisArg is ignored.

Arrow functions cannot be used as constructors 
and will throw an error when used with new.

Arrow functions do not have a prototype property.

// review:
    The destructuring assignment syntax 
is a JavaScript expression that makes it possible to 
    unpack values 
from arrays, or properties from objects, 
    into distinct variables.
// e.g.
    var a, b;
    [a, b] = [10, 20];
    console.log(a); // 10
    
// An arrow function cannot contain a line break between its parameters and its arrow.

callback = callback || () => {};      
// SyntaxError: invalid arrow-function arguments
callback = callback || (() => {});    // ok

Callback function:
https://developer.mozilla.org/en-US/docs/Glossary/Callback_function

// A callback function is a function passed into another function as an argument, 
// which is then invoked inside the outer function to complete some kind of routine or action.

// callbacks are often used to continue code execution after an asynchronous operation has completed
// — these are called asynchronous callbacks. 


Closures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

Classes:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends

// Classes are in fact "special functions", and just as you can define function expressions and function declarations, 
// the class syntax has 2 components: 
// (1) class expressions; (2) class declarations.

// One way to define a class is using a class declaration. 
// To declare a class, you use the class keyword with the name of the class.

// Hoisting:
    An important difference between function declarations and class declarations / expressions
    is that function declarations are hoisted 
    and class declarations are not.
    
A class expression is another way to define a class. 
Class expressions can be named or unnamed. 
The name given to a named class expression is local to the class's body. 
// (it can be retrieved through the class's (not an instance's) .name property)

// The constructor method 
// is a special method for creating and initializing an object created with a class. 

// Note: In derived classes, super() must be called before you can use 'this'. 

The extends keyword 
is used in class declarations or class expressions 
to create a class as a child of another class.

// The extends keyword can be used to subclass custom classes as well as built-in objects.
// e.g. extends the built-in Date object. 


Function.prototype:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype
// The Function.prototype property represents the Function prototype object.

// ***Function objects inherit from Function.prototype.***  

// Function.prototype cannot be modified.
// e.g. Function.prototype.apply() // function.apply(thisArg, [argsArray])


Destructuring assignment:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

The destructuring assignment syntax is a JavaScript expression 
that makes it possible to unpack values from arrays, 
or properties from objects, into distinct variables.
// on the left-hand side of the assignment to define what values to unpack from the sourced variable.
// e.g. 
    var a, b, rest;
    [a, b, ...rest] = [10, 20, 30, 40, 50];
    console.log(rest);
    // expected output: [30, 40, 50]
    

RegExp:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

The RegExp constructor 
creates a regular expression object 
for matching text 
with a pattern.
// There are 2 ways to create a RegExp object: 
// (1) a literal notation; (2) a constructor. 
// e.g. 
    /ab+c/i;
    new RegExp('ab+c', 'i');
    new RegExp(/ab+c/, 'i');
    
// https://regexr.com/


Promise:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise


AJAX:
https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX

Asynchronous JavaScript + XML, 
while not a technology in itself, 
// is a term coined in 2005 by Jesse James Garrett, 
that describes a "new" approach to 
using a number of existing technologies together, 
including HTML or XHTML, Cascading Style Sheets (CSS), JavaScript, 
The Document Object Model (DOM), XML, XSLT (Extensible Stylesheet Language Transformations), 
and most importantly the XMLHttpRequest object.

When these technologies are combined in 
the Ajax model, 
web applications are able to make 
quick, incremental updates 
to the user interface (UI) 
without reloading 
the entire browser page. 
This makes the application 
faster and more responsive 
to user actions.

Although X in Ajax stands for XML, 
JSON 
is used more than XML nowadays 
because of its many advantages such as 
being lighter and a part of JavaScript. 
// Both JSON and XML are used 
// for packaging information in Ajax model.


why AJAX?

it is the use of the XMLHttpRequest object 
to communicate with servers. 
It can send and receive information 
in various formats, 
// including JSON, XML, HTML, and text files. 

AJAX’s most appealing characteristic is its "asynchronous" nature, 
which means it can 
communicate with the server, 
exchange data, 
and update the page 
without having to refresh the page.

The 2 major features of AJAX allow you to do the following:

    Make requests to the server without reloading the page
    Receive and work with data from the server









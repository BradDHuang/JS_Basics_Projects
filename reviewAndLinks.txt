
// Here are links for reviewing some important concepts of JS & React & ...
// Definition & Usage.

JavaScript data types and data structures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
7 data types:
6 data types that are primitives:
    Boolean
    Null
    Undefined
    Number
    String
    Symbol (new in ECMAScript 6)
    
and Object:
// In computer science, an object is a value in memory which is possibly referenced by an identifier.
    Properties
// In JavaScript, objects can be seen as a collection of properties. 
    "Normal" objects, and functions
// A JavaScript object is a mapping between keys and values. 
// Functions are regular objects with the additional capability of being callable.
    Dates
// When representing dates, the best choice is to use the built-in Date utility in JavaScript.
    Indexed collections: Arrays (and typed Arrays)
// Arrays are regular objects for which there is a particular relationship between integer-key-ed properties and the 'length' property. 
// Additionally, arrays inherit from Array.prototype which provides to them a handful of convenient methods to manipulate arrays. 
    Keyed collections: Maps, Sets(, WeakMaps, WeakSets)
    Structured data: JSON
    More objects in the standard library // JavaScript has a standard library of built-in objects. 

var vs. let:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var

The let statement declares a block scope local variable, optionally initializing it to a value.
unlike the var keyword, 
which defines a variable globally, or locally to an entire function regardless of block scope.

var declarations, 
wherever they occur, 
are processed before any code is executed. 
// This is called hoisting,
// as it appears that the variable declaration is moved to the top of the function or global code.
// Undeclared variables are always global.

Hoisting:
https://developer.mozilla.org/en-US/docs/Glossary/Hoisting

Strict mode:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode

Spread syntax:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

Functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions
Arrow functions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
Callback function:
https://developer.mozilla.org/en-US/docs/Glossary/Callback_function

Closures:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

Classes:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends

Function.prototype:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype
// The Function.prototype property represents the Function prototype object.

// ***Function objects inherit from Function.prototype.***  

// Function.prototype cannot be modified.
// e.g. Function.prototype.apply() // function.apply(thisArg, [argsArray])


Destructuring assignment:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

RegExp:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

Promise:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise












// this file contains JS basics for review purpose.

(1) var vs. let / const
    var is function scope;
    let and const are block scope.
    
(2) More about for-loop
for (statement 1; statement 2; statement 3) {
    code block to be executed
}

// Statement 1 is executed (one time) before the execution of the code block.
// Statement 2 defines the condition for executing the code block.
// Statement 3 is executed (every time) after the code block has been executed.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of

    for (variable of iterable) {
      statement
    }
    
// e.g.
// Iterating over a String

let iterable = 'boo';
for (let value of iterable) {
  console.log(value);
}
// "b"
// "o"
// "o"

// A for...in loop only iterates over enumerable, non-Symbol properties. 
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in

(3) Array.prototype.entries()
The entries() method 
returns a new Array Iterator object 
that contains the key/value pairs 
for each index in the array.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries

// e.g.
var a = ['a', 'b', 'c'];
var iterator = a.entries();
for (let e of iterator) {
  console.log(e);
}
// [0, 'a'] ... 

(4) Scope
The current context of execution. 
The context in which values and expressions are "visible," or can be referenced. 
// If a variable or other expression is not "in the current scope," then it is unavailable for use. 

A function serves as a closure in JavaScript, 
and thus creates a scope, 
so that (for example) a variable defined exclusively within the function 
cannot be accessed from outside the function or within other functions.

Global Scope
    Objects declared outside of any function are global;
    Visible everywhere in a JavaScript program;
    Use it without declaring – not allowed under ‘strict’ mode.
Function Scope // "var"
Block Scope // "let / const"
// Function arguments (parameters) work as local variables inside functions.
// Local variables have local scope: They can only be accessed within the function.

// "const", must be initialized
// "let", not hoisted 



















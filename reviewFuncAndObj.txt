
// this file is created to review JS functions & objects.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions

(1) DEFINING FUNCTIONS
    // (a) Function Constructor
        // Inherits global scope
        // Slowest, should be avoided
        e.g. let multiply = new Function(‘x’, ‘y’, ‘return x * y’);

    (b) Function Declaration
        Inherits current scope
        e.g. function multiply(x, y) {
                 return x * y;
             }
        // Will return undefined if no return statement
        // allows ‘Hoisting’

    (c) Function Expression
        (Can be) Anonymous function
        Variable assignment
        e.g. let multiply = function(x, y) {
                 return x * y;
             };
        // No hoisting
             
// Function names are normal variables

// A property of an object can also refer to a function, which is called a method.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
// arguments is an Array-like object 
// accessible inside functions that contains the values of the arguments passed to that function.

// “Array-like” 
// means that arguments has a length property and properties indexed from zero, 
// but it doesn't have Array's built-in methods like forEach and map. 

// e.g.
    function sum() {
        var sum = 0;
        for (let i = 0; i < arguments.length; i++) {
            sum += parseInt(arguments[i]);
        }
        return sum;
    }
    console.log(sum(1, 2, 4)); // 7


(2) CREATING OBJECT (INSTANCE)
    (a) object literal
    (b) “new” keyword
    (c) Object.create()
    
(3) DESTRUCTURING ASSIGNMENT
    Split (“destructure”) a composite object into individual variables.
    // Object destructuring 
    // Array destructuring
    // e.g.
        const obj = { b: 2, c: 3, d: 4 };
        const {a, b, c} = obj; // object destructuring assignment
        a; // undefined (there was no "a" in obj)
        b; // 2
        c; // 3
        d; // ReferenceError: "d" is not defined
        
(4) FUNCTION CLOSURES
    // Through the nesting of functions.
        It grants the inner function full access 
        to all the variables and functions 
        defined inside the outer function.
        // The outer function does not have access to the variables and functions defined inside the inner function.

    A closure 
    is created when the inner function is made available 
    to any scope outside the outer function.
    
    // Small pitfall:
        // If an enclosed function defines a variable with the same name as the name of a variable in the outer scope.
            // There is no way to refer to the variable in the outer scope again!

    // e.g.
        var firstf = function () {
            var counter = 0;
            return function () {
                return counter += 1;
            }
        }
        var add = firstf();
        add();
        add();
        add(); // 3

// POTENTIAL RISK – CLOSURE IN A LOOP
https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example

// the problem is that the variable i, 
// within each of the anonymous functions, 
// is bound to the same variable outside of the function.

// vs. using "let", instead of "var".


(5) ARROW FUNCTIONS
    • Introduced in ES2015
    • Simplify syntax in 3 ways:
        • Omit the word function;
        • Omit the parentheses If the function takes a single argument;
        • Omit curly braces and the return statement if function is a single expression.
    • Always anonymous
    
    // if expression is an object literal, wrap it in parens to distinguish it from a block of code.
    
(6) Array.prototype.reduce()

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

The reduce() method 
executes a reducer function (that you provide) 
on each member of the array resulting in a single output value.

arr.reduce(callback[, initialValue])

// e.g.
    const array1 = [1, 2, 3, 4];
    const reducer = (accumulator, currentValue) => accumulator + currentValue;
    
    console.log(array1.reduce(reducer)); // 1 + 2 + 3 + 4
    // expected output: 10
    
    console.log(array1.reduce(reducer, 5)); // 5 + 1 + 2 + 3 + 4
    // expected output: 15

(7) THIS KEYWORD
    this is a special read-only reference inside a function.
    
    When methods are called, it takes on the value of the specific object it was called on.
    Bound how the function is called, 
    Not where the function is declared.
    
    In strict mode, however, the value of this 
    remains at whatever it was set to when entering the execution context, 
    so, in the following case, this will default to undefined:
        function f2() {
          'use strict'; // see strict mode
          return this;
        }
        
        f2() === undefined; // true
    So, in strict mode, if this was not defined by the execution context, it remains undefined.

    To pass the value of this from one context to another, use call, or apply.
    
(8) Object 
    is a container that can represent real world things    
    It can contain properties
    It can also contain functions
    They are all instances of Object class.
    
    prototype 
    is a reference 
    to another object 
    from which properties are inherited.
    
    // Every variable can be considered as object

(9) ES6
    ES6 created OOP syntax.
    // e.g.
    class
    extends
    super
    // In subclasses, constructor must call super(args) 
    // and it must be before this is accessed.
    // because the highest superclass creates the object.
    
    The get syntax 
        binds an object property to a function that will be called when that property is looked up.
    The set syntax 
        binds an object property to a function to be called when there is an attempt to set that property.
    // e.g.
    get property() {},
    set property(value) {}
    

    

























